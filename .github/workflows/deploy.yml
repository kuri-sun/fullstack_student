name: CICD

on:
  push:
    branches: [ master ]

  workflow_dispatch:

env:
  # Postgres
  POSTGRESQL_VERSION: 13.1
  POSTGRESQL_DB: students
  POSTGRESQL_USER: postgres
  POSTGRESQL_PASSWORD: password
  # Java
  JAVA_VERSION: 17
  # DockerHub
  DOCKER_HUB_USERNAME: s0517019
  APP_IMAGE_IMAGE: student-fullstack
  APP_IMAGE_TAG: ${{ github.sha }}
  # AWS
  AWS_REGION: us-east-1
  AWS_ECS_TASK_DEFINITION_NAME: student-fullstack-task
  AWS_ECS_CONTAINER_NAME: student-fullstack-container
  AWS_ECS_SERVICE_NAME: student-fullstack-service
  AWS_ECS_CLUSTER_NAME: student-fullstack
  # PRODUCTION DATABASE
  DATABASE_URL: ${{ secret }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.1
        env:
          POSTGRES_DB: ${{ env.POSTGRESQL_DB }}
          POSTGRES_USER: ${{ env.POSTGRESQL_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRESQL_PASSWORD }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Setup Java JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Maven Clean Package and Push to Dockerhub
        run: |
          ./mvnw --no-transfer-progress clean package \
            -P jib-push-to-aws \
            -Daws.ecr.url=${{ secrets.AWS_ECR_URL }} \
            -Dapp.image.tag=${{ env.APP_IMAGE_TAG }} \
            -Ddatabase.url=${{ secrets.PROD_DATABASE_URL }} \
            -Ddatabase.username=${{ secrets.PROD_DATABASE_USERNAME }} \
            -Ddatabase.password=${{ secrets.PROD_DATABASE_PASSWORD }}

      - name: Download ECS Task Definition JSON file
        env:
          ECS_TASK_DEFINITION: ${{ env.AWS_ECS_TASK_DEFINITION_NAME }}
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > task-definition.json

      - name: Fill in the new fields of the ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.AWS_ECS_CONTAINER_NAME }}
          image: ${{ secrets.AWS_ECR_URL }}/${{ env.APP_IMAGE_IMAGE }}:${{ env.APP_IMAGE_TAG }}

      - name: Deploy Amazon ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.AWS_ECS_SERVICE_NAME }}
          cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
          wait-for-service-stability: true